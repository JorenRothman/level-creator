{"version":3,"sources":["components/Header.js","components/Grid.js","components/GridTile.js","components/TileSelector.js","App.js","index.js"],"names":["header","props","react_default","a","createElement","onClick","save","type","placeholder","value","levelIndex","onChange","Grid","grid","map","gridRow","gridItem","style","width","className","GridTile","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","x","y","tileData","tileClick","bind","assertThisInitialized","setState","currentTile","color","backgroundColor","data-id","changeColor","Component","TileSelector","selectTile","App","worldWidth","worldHeight","saveLayout","changeCurrentTile","changeLevelIndex","prevProps","prevState","createGrid","tileNumber","_this$state","layout","counter","tiles","document","querySelectorAll","i","length","j","push","parseInt","getAttribute","json","JSON","stringify","console","log","jsonWithKey","level","blob","Blob","FileSaver","saveAs","concat","_this$state2","tileCountX","tileCountY","components_GridTile","key","event","target","_this$state3","Header","components_Grid","components_TileSelector","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.8af0ab1e.chunk.js","sourcesContent":["import React from 'react';\n\nconst header = props => {\n  return (\n    <header>\n      <button onClick={props.save}>Save</button>\n      <label>\n        Level index:\n        <input\n          type=\"text\"\n          placeholder=\"1\"\n          value={props.levelIndex}\n          onChange={props.onChange}\n        />\n      </label>\n    </header>\n  );\n};\n\nexport default header;\n","import React from 'react';\n\nconst Grid = props => {\n  const grid = props.grid.map(gridRow => gridRow.map(gridItem => gridItem));\n\n  return (\n    <div style={{ width: props.width }} className=\"grid\">\n      {grid}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { Component } from 'react';\n\nclass GridTile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      x: props.x,\n      y: props.y,\n      tileData: -1,\n    };\n\n    this.tileClick = this.tileClick.bind(this);\n  }\n\n  tileClick() {\n    this.setState({\n      tileData: this.props.currentTile,\n    });\n  }\n\n  changeColor() {\n    const { tileData } = this.state;\n    let color = 'blue';\n\n    if (tileData === 0) {\n      color = 'green';\n    }\n\n    if (tileData === 1) {\n      color = 'brown';\n    }\n\n    return {\n      backgroundColor: color,\n    };\n  }\n\n  render() {\n    const { tileData } = this.state;\n\n    return (\n      <div\n        data-id={tileData}\n        style={this.changeColor()}\n        className=\"tile\"\n        onClick={this.tileClick}\n      >\n        Data:\n        {tileData}\n      </div>\n    );\n  }\n}\n\nexport default GridTile;\n","import React from 'react';\n\nconst TileSelector = props => {\n  return (\n    <div className=\"tile-selector\">\n      <ul>\n        <li>\n          <button onClick={() => props.selectTile(-1)}>Air</button>\n        </li>\n        <li>\n          <button onClick={() => props.selectTile(0)}>Grass</button>\n        </li>\n        <li>\n          <button onClick={() => props.selectTile(1)}>Ground</button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default TileSelector;\n","import React, { Component } from 'react';\nimport FileSaver from 'file-saver';\nimport Header from './components/Header';\nimport Grid from './components/Grid';\nimport GridTile from './components/GridTile';\nimport TileSelector from './components/TileSelector';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      worldWidth: 2400,\n      worldHeight: 800,\n      grid: [],\n      currentTile: -1,\n      levelIndex: '',\n    };\n\n    this.saveLayout = this.saveLayout.bind(this);\n    this.changeCurrentTile = this.changeCurrentTile.bind(this);\n    this.changeLevelIndex = this.changeLevelIndex.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentTile !== this.state.currentTile) {\n      this.createGrid();\n    }\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  changeCurrentTile(tileNumber) {\n    this.setState({\n      currentTile: tileNumber,\n    });\n  }\n\n  saveLayout() {\n    const { grid, levelIndex } = this.state;\n    const layout = [];\n    let counter = 0;\n\n    if (levelIndex === '') {\n      return;\n    }\n\n    const tiles = document.querySelectorAll('.tile');\n\n    for (let i = 0; i < grid.length; i++) {\n      layout[i] = [];\n      for (let j = 0; j < grid[i].length; j++) {\n        layout[i].push(parseInt(tiles[counter].getAttribute('data-id')));\n        counter++;\n      }\n    }\n    const json = JSON.stringify(layout);\n    console.log(json);\n\n    const jsonWithKey = JSON.stringify({\n      level: layout,\n    });\n\n    const blob = new Blob([jsonWithKey], { type: 'application/json' });\n    FileSaver.saveAs(blob, `level${levelIndex}.json`);\n  }\n\n  createGrid() {\n    const { worldWidth, worldHeight, currentTile } = this.state;\n    const tileCountX = worldWidth / 50;\n    const tileCountY = worldHeight / 50;\n\n    const grid = [];\n\n    for (let i = 0; i < tileCountY; i++) {\n      grid[i] = [];\n      for (let j = 0; j < tileCountX; j++) {\n        grid[i].push(\n          <GridTile\n            key={`${i}${j}`}\n            currentTile={this.state.currentTile}\n            x={j}\n            y={i}\n          />\n        );\n      }\n    }\n\n    this.setState({\n      grid,\n    });\n  }\n\n  changeLevelIndex(event) {\n    const { value } = event.target;\n\n    this.setState({\n      levelIndex: value,\n    });\n  }\n\n  render() {\n    const { worldWidth, grid, levelIndex } = this.state;\n    return (\n      <div className=\"App\">\n        <Header\n          levelIndex={levelIndex}\n          onChange={this.changeLevelIndex}\n          save={this.saveLayout}\n        />\n        <Grid grid={grid} width={worldWidth} />\n        <TileSelector selectTile={this.changeCurrentTile} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}