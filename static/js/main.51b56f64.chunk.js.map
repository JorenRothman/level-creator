{"version":3,"sources":["components/Header.js","components/Grid.js","components/GridTile.js","components/TileSelector.js","App.js","index.js"],"names":["header","props","react_default","a","createElement","onClick","save","type","placeholder","value","levelIndex","onChange","id","fileUpload","Grid","grid","map","gridRow","gridItem","style","width","className","GridTile","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","x","y","tileData","tileClick","bind","assertThisInitialized","prevProps","prevState","setState","_this$state","currentTile","color","backgroundColor","data-id","changeColor","Component","TileSelector","selectTile","App","worldWidth","worldHeight","gridItems","saveLayout","changeCurrentTile","changeLevelIndex","tileChanged","createGridItems","createGrid","tileNumber","layout","item","jsonWithKey","JSON","stringify","level","blob","Blob","FileSaver","saveAs","concat","i","length","j","element","push","components_GridTile","key","position","console","log","_this$state2","tileCountX","tileCountY","event","target","_this2","file","document","getElementById","files","fr","FileReader","readAsText","addEventListener","json","parse","result","fileUploadProcess","_this$state3","Header","components_Grid","components_TileSelector","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.51b56f64.chunk.js","sourcesContent":["import React from 'react';\n\nconst header = props => {\n  return (\n    <header>\n      <button onClick={props.save}>Save</button>\n      <label>\n        Level index:\n        <input\n          type=\"text\"\n          placeholder=\"1\"\n          value={props.levelIndex}\n          onChange={props.onChange}\n        />\n      </label>\n      <label>\n        Load level:\n        <input id=\"file\" type=\"file\" onChange={props.fileUpload} />\n      </label>\n    </header>\n  );\n};\n\nexport default header;\n","import React from 'react';\n\nconst Grid = props => {\n  const grid = props.grid.map(gridRow => gridRow.map(gridItem => gridItem));\n\n  return (\n    <div style={{ width: props.width }} className=\"grid\">\n      {grid}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { Component } from 'react';\n\nclass GridTile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      x: props.x,\n      y: props.y,\n      tileData: props.tileData,\n    };\n\n    this.tileClick = this.tileClick.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.tileData !== this.props.tileData) {\n      this.setState({\n        tileData: this.props.tileData,\n      });\n    }\n  }\n\n  tileClick() {\n    const { x, y, tileData } = this.state;\n\n    this.setState({\n      tileData: this.props.currentTile,\n    });\n\n    this.props.onChange(x, y, this.props.currentTile);\n  }\n\n  changeColor() {\n    const { tileData } = this.state;\n    let color = 'blue';\n\n    if (tileData === 0) {\n      color = 'green';\n    }\n\n    if (tileData === 1) {\n      color = 'brown';\n    }\n\n    return {\n      backgroundColor: color,\n    };\n  }\n\n  render() {\n    const { tileData } = this.state;\n\n    return (\n      <div\n        data-id={tileData}\n        style={this.changeColor()}\n        className=\"tile\"\n        onClick={this.tileClick}\n      >\n        Data:\n        {tileData}\n      </div>\n    );\n  }\n}\n\nexport default GridTile;\n","import React from 'react';\n\nconst TileSelector = props => {\n  return (\n    <div className=\"tile-selector\">\n      <ul>\n        <li>\n          <button onClick={() => props.selectTile(-1)}>Air</button>\n        </li>\n        <li>\n          <button onClick={() => props.selectTile(0)}>Grass</button>\n        </li>\n        <li>\n          <button onClick={() => props.selectTile(1)}>Ground</button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default TileSelector;\n","import React, { Component } from 'react';\nimport FileSaver from 'file-saver';\nimport Header from './components/Header';\nimport Grid from './components/Grid';\nimport GridTile from './components/GridTile';\nimport TileSelector from './components/TileSelector';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      worldWidth: 2400,\n      worldHeight: 800,\n      grid: [],\n      gridItems: [],\n      currentTile: -1,\n      levelIndex: '',\n    };\n\n    this.saveLayout = this.saveLayout.bind(this);\n    this.changeCurrentTile = this.changeCurrentTile.bind(this);\n    this.changeLevelIndex = this.changeLevelIndex.bind(this);\n    this.tileChanged = this.tileChanged.bind(this);\n    this.fileUpload = this.fileUpload.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.grid !== this.state.grid) {\n      this.createGridItems();\n    }\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  changeCurrentTile(tileNumber) {\n    this.setState({\n      currentTile: tileNumber,\n    });\n  }\n\n  saveLayout() {\n    const { grid, levelIndex } = this.state;\n\n    if (levelIndex === '') {\n      return;\n    }\n\n    const layout = grid.map(gridRow => gridRow.map(item => item.tileData));\n\n    const jsonWithKey = JSON.stringify({\n      level: layout,\n    });\n\n    const blob = new Blob([jsonWithKey], { type: 'application/json' });\n    FileSaver.saveAs(blob, `level${levelIndex}.json`);\n  }\n\n  createGridItems() {\n    const { grid } = this.state;\n    const gridItems = [];\n    for (let i = 0; i < grid.length; i++) {\n      gridItems[i] = [];\n      for (let j = 0; j < grid[i].length; j++) {\n        const element = grid[i][j];\n        gridItems[i].push(\n          <GridTile\n            key={`${element.position.x}${element.position.y}`}\n            currentTile={this.state.currentTile}\n            tileData={element.tileData}\n            onChange={this.tileChanged}\n            x={element.position.x}\n            y={element.position.y}\n          />\n        );\n      }\n    }\n\n    this.setState({\n      gridItems,\n    });\n  }\n\n  tileChanged(x, y, tileData) {\n    console.log(x, y, tileData);\n    const { grid } = this.state;\n\n    grid[y][x].tileData = tileData;\n\n    console.log(grid[y][x]);\n\n    this.setState({\n      grid,\n    });\n  }\n\n  createGrid() {\n    const { worldWidth, worldHeight, currentTile } = this.state;\n    const tileCountX = worldWidth / 50;\n    const tileCountY = worldHeight / 50;\n\n    const grid = [];\n\n    for (let i = 0; i < tileCountY; i++) {\n      grid[i] = [];\n      for (let j = 0; j < tileCountX; j++) {\n        grid[i].push({\n          position: { x: j, y: i },\n          tileData: -1,\n        });\n      }\n    }\n\n    this.setState({\n      grid,\n    });\n  }\n\n  changeLevelIndex(event) {\n    const { value } = event.target;\n\n    this.setState({\n      levelIndex: value,\n    });\n  }\n\n  fileUpload(event) {\n    const fileEl = document.getElementById('file');\n    const file = fileEl.files[0];\n    const fr = new FileReader();\n    fr.readAsText(file);\n\n    fr.addEventListener('load', () => {\n      const json = JSON.parse(fr.result);\n      this.fileUploadProcess(json.level);\n    });\n  }\n\n  fileUploadProcess(json) {\n    const grid = [];\n    for (let i = 0; i < json.length; i++) {\n      grid[i] = [];\n      for (let j = 0; j < json[i].length; j++) {\n        grid[i].push({\n          position: { x: j, y: i },\n          tileData: json[i][j],\n        });\n      }\n    }\n\n    this.setState({\n      grid,\n    });\n  }\n\n  render() {\n    const { worldWidth, gridItems, levelIndex } = this.state;\n    return (\n      <div className=\"App\">\n        <Header\n          levelIndex={levelIndex}\n          onChange={this.changeLevelIndex}\n          save={this.saveLayout}\n          fileUpload={this.fileUpload}\n        />\n        <Grid grid={gridItems} width={worldWidth} />\n        <TileSelector selectTile={this.changeCurrentTile} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}